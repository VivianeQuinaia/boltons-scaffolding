<?php

namespace {LESCRIPT_NAMESPACE};

use {LESCRIPT_NAMESPACE}\Builders\Builder;
use {LESCRIPT_NAMESPACE}\Entities\Status;
use {LESCRIPT_NAMESPACE}\Requests\Request;
use {LESCRIPT_NAMESPACE}\Responses\ResponseInterface;
use {LESCRIPT_NAMESPACE}\Responses\Error\Response as ErrorResponse;
{LESCRIPT_IMPORT_GATEWAYS}
{LESCRIPT_IMPORT_RULES}

class UseCase
{
    private $response;
    {LESCRIPT_DECLARE_GATEWAYS}
    private $logger;

    {LESCRIPT_USE_CASE_CONSTRUCTOR}

    public function execute(Request $request)
    {
        try {
            $this->response = (new Builder())
                {LESCRIPT_WITH_CALLS}
                ->build();
        }
        {LESCRIPT_EXCEPTION_CATCHES}
        catch (\Throwable $exception) {
            $this->logger->error('Error', ['exception' => $exception]);
            $this->response = new ErrorResponse(new Status(Status::ERROR_UNKNOWN, 'Unknown error'));
        }
    }

    public function getResponse(): ResponseInterface
    {
        return $this->response;
    }
}
